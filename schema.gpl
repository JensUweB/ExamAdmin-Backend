# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Auth"""
type AuthModel {
  token: String!
  tokenExpireDate: DateTime!
  user: UserDto!
}

type ClubDto {
  _id: ID!

  """The name of the club"""
  name: String!
  street: String!
  zip: String!
  city: String!

  """Register of associatoins ID, if exists in country of origin"""
  registrationId: String!

  """Country of origin"""
  country: String!

  """An array(ids) of provided martial arts in this club"""
  martialArts: [MartialArtsDto!]!

  """
  An array(ids) of users who administrate this club. Default: The creator of the club.
  """
  admins: [UserDto!]!
}

input ClubInput {
  """The name of the club"""
  name: String
  street: String
  zip: String
  city: String

  """Register of associatoins ID, if exists in country of origin"""
  registrationId: String

  """Country of origin"""
  country: String

  """An array(ids) of provided martial arts in this club"""
  martialArts: [String!]

  """
  An array(ids) of users who administrate this club. Default: The creator of the club.
  """
  admins: [String!]
}

type ClubMemberDto {
  club: ClubDto!
  confirmed: Boolean!
}

input ClubMemberInput {
  club: String!
  confirmed: Boolean!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type ExamDto {
  _id: ID!
  title: String!
  description: String!
  examDate: DateTime!
  regEndDate: DateTime!
  club: String!
  examiner: String!
  martialArt: String!
  participants: [String!]!
}

type ExaminerDto {
  _id: ID!
  firstName: String!
  lastName: String!
}

input ExaminerInput {
  _id: String
  firstName: String
  lastName: String
}

input ExamInput {
  """The title of the exam"""
  title: String!

  """The description of the exam"""
  description: String!

  """The date when the exam should be held"""
  examDate: DateTime!

  """The date when registration will be closed"""
  regEndDate: DateTime!

  """The id of the accompanying association / club"""
  club: String!

  """The user id of the examiner"""
  examiner: String!

  """The id of the martial art this exam is for"""
  martialArt: String!

  """An array of ids from users who wants to get examined """
  participants: [String!]!
}

type ExamResultDto {
  _id: ID!
  user: String!
  exam: String!
  martialArt: MartialArtDto!
  examiner: ExaminerDto!
  rank: String!
  date: String!
  reportUri: String!
  passed: Boolean!
}

input ExamResultInput {
  user: String
  exam: String
  martialArt: MartialArtInput
  examiner: ExaminerInput
  rank: String
  date: String
  reportUri: String
  passed: Boolean
}

type MartialArtDto {
  _id: ID!
  name: String!
  styleName: String!
}

input MartialArtInput {
  _id: String
  name: String
  styleName: String
}

type MartialArtsDto {
  _id: ID!
  name: String!
  styleName: String!
  ranks: [RankDto!]!
  examiners: [UserDto!]!
}

input MartialArtsInput {
  """The name of the martial art"""
  name: String

  """The style name the martial art belongs to"""
  styleName: String

  """
  An array of all ranks available in this martial art. The lower the rank number the higher the rank.
  """
  ranks: [RankInput!]

  """
  An array of users who is examiner for this martial art. Insert user id.
  """
  examiners: [String!]
}

type Mutation {
  """Add a new club to the clubs array of a user"""
  addUserToClub(clubId: String!): UserDto!

  """Add a new martial art rank to the current user"""
  addMartialArtRankToUser(rankId: String!): UserDto!

  """Deletes the account of the current user"""
  deleteUser: Boolean!

  """Creates a new martial art"""
  createMartialArt(input: MartialArtsInput!): MartialArtsDto!

  """Updates an existing martial art"""
  updateMartialArt(input: MartialArtsInput!, id: String!): MartialArtsDto!
  deleteMartialArt(id: String!): String!

  """Creates a new User"""
  signup(userInput: UserInput!): String!
  forgotPassword(email: String!): String!
  changePassword(password: String!): Boolean!

  """Create a new club."""
  createClub(input: ClubInput!): ClubDto!

  """Update an existinc club. Just fill out what you want to change!"""
  updateClub(input: ClubInput!, id: String!): ClubDto!
  deleteClub: String!

  """Creates a new exam. DOH!"""
  createExam(input: ExamInput!): ExamDto!

  """
  Deletes the exam with given examId, if exam.examiner equals current user
  """
  deleteExam(examId: String!): String!

  """Creates a new exam result"""
  createExamResult(input: ExamResultInput!): ExamResultDto!

  """Delete all exam results related to the current user"""
  deleteRelatedExamResults: Boolean!

  """
  Examiners can upload an exam protocol to an existing exam result. Use cURL request to send required data.
  """
  uploadExamProtocol(protocol: Upload!, examResultId: String!): Boolean!
}

type Query {
  """Returns an user object representing the current logged in user"""
  getUser: UserDto!

  """Returns an array of martial art objects"""
  getAllMartialArts: [MartialArtsDto!]!

  """Returns one martial art object by id"""
  getMartialArtById(id: String!): MartialArtsDto!

  """Returns one martial art object by rank id"""
  getMartialArtByRank(rankId: String!): MartialArtsDto!

  """Returns striped out one rank object by rank id"""
  getRank(rankId: String!): RankDto!

  """Logs the user in if email and password are correct"""
  login(password: String!, email: String!): AuthModel!

  """Returns an array with all existing clubs"""
  getAllClubs: [ClubDto!]!

  """Returns one club by id"""
  getClubById(id: String!): ClubDto!

  """Returns an array of all exams. Including previous ones."""
  getAllExams: [ExamDto!]!

  """Returns one exam with the given id"""
  getExamById(id: String!): ExamDto!

  """
  Returns an array of all exams. Only exams with an future starting date included.
  """
  getPlannedExams: [ExamDto!]!

  """Returns an array with all exam results of the current user"""
  getAllExamResults: [ExamResultDto!]!

  """Returns one exam result with a given id"""
  getExamResultById(id: String!): ExamResultDto!
}

type RankDto {
  _id: ID!
  name: String!
  number: Float!
}

input RankInput {
  name: String!
  number: Float!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserDto {
  _id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!

  """
  Returns an array of Martial Arts. The child array "ranks" should only contain the current rank (at index 0).
  """
  martialArts: [MartialArtsDto!]!
  clubs: [ClubMemberDto!]!
}

input UserInput {
  firstName: String
  lastName: String
  email: String
  password: String
  martialArts: [String!]
  clubs: [ClubMemberInput!]
}
