# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Auth"""
type AuthModel {
  token: String!
  tokenExpireDate: DateTime!
  user: UserDto!
}

type ClubDto {
  _id: ID!

  """The name of the club"""
  name: String!
  street: String!
  zip: String!
  city: String!

  """Register of associatoins ID, if exists in country of origin"""
  registrationId: String!

  """Country of origin"""
  country: String!

  """An array(ids) of provided martial arts in this club"""
  martialArts: [MartialArtsDto!]!

  """
  An array(ids) of users who administrate this club. Default: The creator of the club.
  """
  admins: [UserDto!]!
}

input ClubInput {
  """The name of the club"""
  name: String
  street: String
  zip: String
  city: String

  """Register of associatoins ID, if exists in country of origin"""
  registrationId: String

  """Country of origin"""
  country: String

  """An array(ids) of provided martial arts in this club"""
  martialArts: [String!]

  """
  An array(ids) of users who administrate this club. Default: The creator of the club.
  """
  admins: [String!]
}

type ClubMemberDto {
  club: ClubDto!
  confirmed: Boolean!
}

input ClubMemberInput {
  club: String!
  confirmed: Boolean!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type ExamDto {
  _id: ID!
  title: String!
  description: String!
  examDate: DateTime!
  regEndDate: DateTime!
  club: String!
  examiner: String!
  martialArt: String!
  participants: [String!]!
}

type ExaminerDto {
  _id: ID!
  firstName: String!
  lastName: String!
}

input ExaminerInput {
  _id: String
  firstName: String
  lastName: String
}

input ExamInput {
  """The title of the exam"""
  title: String!

  """The description of the exam"""
  description: String!

  """The date when the exam should be held"""
  examDate: DateTime!

  """The date when registration will be closed"""
  regEndDate: DateTime!

  """The id of the accompanying association / club"""
  club: String!

  """The user id of the examiner"""
  examiner: String!

  """The id of the martial art this exam is for"""
  martialArt: String!

  """An array of ids from users who wants to get examined """
  participants: [String!]!
}

type ExamResultDto {
  _id: ID!
  user: String!
  exam: String!
  martialArt: MartialArtDto!
  examiner: ExaminerDto!
  rank: String!
  date: String!
  reportUri: String!
  passed: Boolean!
}

input ExamResultInput {
  user: String
  exam: String
  martialArt: MartialArtInput
  examiner: ExaminerInput
  rank: String
  date: String
  reportUri: String
  passed: Boolean
}

type MartialArtDto {
  _id: ID!
  name: String!
  styleName: String!
}

input MartialArtInput {
  _id: String
  name: String
  styleName: String
}

type MartialArtsDto {
  _id: ID!
  name: String!
  styleName: String!
  ranks: [RankDto!]!
  examiners: [UserDto!]!
}

input MartialArtsInput {
  """The name of the martial art"""
  name: String

  """The style name the martial art belongs to"""
  styleName: String

  """
  An array of all ranks available in this martial art. The lower the rank number the higher the rank.
  """
  ranks: [RankInput!]

  """
  An array of users who is examiner for this martial art. Insert user id.
  """
  examiners: [String!]
}

type Mutation {
  addClub(clubId: String!, userId: String!): UserDto!
  addMartialArtToUser(rankId: String!, userId: String!): UserDto!
  createMartialArt(input: MartialArtsInput!): MartialArtsDto!
  updateMartialArt(input: MartialArtsInput!, id: String!): MartialArtsDto!
  signup(userInput: UserInput!): AuthModel!
  createClub(input: ClubInput!): ClubDto!
  updateClub(input: ClubInput!, id: String!): ClubDto!
  createExam(input: ExamInput!): ExamDto!
  createExamResult(input: ExamResultInput!): ExamResultDto!
}

type Query {
  getUserByEmail(email: String!): UserDto!
  getUserById(id: String!): UserDto!
  getAllMartialArts: [MartialArtsDto!]!
  getMartialArtById(id: String!): MartialArtsDto!
  getMartialArtByRank(rankId: String!): MartialArtsDto!
  getRank(rankId: String!): RankDto!
  login(password: String!, email: String!): AuthModel!
  getAllClubs: [ClubDto!]!
  getClubById(id: String!): ClubDto!
  getAllExams: [ExamDto!]!
  getExamById(id: String!): ExamDto!
  getAllExamResults(userId: String!): [ExamResultDto!]!
  getExamResultById(id: String!): ExamResultDto!
}

type RankDto {
  _id: ID!
  name: String!
  number: Float!
}

input RankInput {
  name: String!
  number: Float!
}

type UserDto {
  _id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!

  """
  Returns an array of Martial Arts. The child array "ranks" should only contain the current rank (at index 0).
  """
  martialArts: [MartialArtsDto!]!
  clubs: [ClubMemberDto!]!
}

input UserInput {
  firstName: String
  lastName: String
  email: String
  password: String
  martialArts: [String!]
  clubs: [ClubMemberInput!]
}
