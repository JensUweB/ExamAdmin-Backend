# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Auth"""
type AuthModel {
  token: String!
  tokenExpireDate: DateTime!
  user: UserDto!
}

type ClubDto {
  _id: ID!

  """The name of the club"""
  name: String!

  """You need a description for this?"""
  street: String!

  """You need a description for this?"""
  zip: String!

  """You need a description for this?"""
  city: String!

  """Register of associatoins ID, if exists in country of origin"""
  registrationId: String!

  """Country of origin"""
  country: String!

  """An array(ids) of provided martial arts in this club"""
  martialArts: [MartialArtsDto!]!

  """
  An array(ids) of users who administrate this club. Default: The creator of the club.
  """
  admins: [UserDto!]!
}

input ClubInput {
  """You need a description for this?"""
  name: String

  """You need a description for this?"""
  street: String

  """You need a description for this?"""
  zip: String

  """You need a description for this?"""
  city: String

  """Register of associatoins ID, if exists in country of origin"""
  registrationId: String

  """Country of origin"""
  country: String

  """An array(ids) of provided martial arts in this club"""
  martialArts: [String!]

  """
  An array(ids) of users who administrate this club. Default: The creator of the club.
  """
  admins: [String!]
}

type ClubMemberDto {
  club: ClubDto!
  confirmed: Boolean!
}

input ClubMemberInput {
  """The id of the club the user is member of."""
  club: String

  """
  The confirmation status; false by default. Only turns true, if the club admin confirms the membership.
  """
  confirmed: Boolean
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type ExamDto {
  _id: ID!

  """The title of the exam"""
  title: String!

  """Describe what tis exam is all about"""
  description: String!

  """The price - how much this exam will cost."""
  price: Float!

  """The date and time of the exam"""
  examDate: DateTime!

  """The date and time when registration should close"""
  regEndDate: DateTime!

  """Is this exam public, or only for club members?"""
  isPublic: Boolean!

  """The id of the club who organizes this exam"""
  club: ClubDto!

  """The id of the responsible examiner. Usually the current user."""
  examiner: UserDto!

  """The adress where the exam will take place"""
  examPlace: String!

  """The martial art that gets tested"""
  martialArt: MartialArtsDto!

  """An array with IDs from users who wants to get tested"""
  participants: [UserDto!]!
}

input ExaminerInput {
  """The user id of the examiner. Just in case we need more information"""
  _id: String

  """The first (and middle) name of the examiner"""
  firstName: String

  """The last name of the examiner"""
  lastName: String
}

input ExamInput {
  """The title of the exam"""
  title: String

  """The description of the exam"""
  description: String

  """The price - how much this exam will cost."""
  price: Float

  """The description of the exam"""
  examPlace: String

  """The date when the exam should be held"""
  examDate: DateTime

  """The date when registration will be closed"""
  regEndDate: DateTime

  """Is this exam open for public registration?"""
  isPublic: Boolean

  """The id of the accompanying association / club"""
  club: String

  """The user id of the examiner"""
  examiner: String

  """The id of the martial art this exam is for"""
  martialArt: String

  """An array of ids from users who wants to get examined """
  participants: [String!]
}

type ExamResultDto {
  _id: ID!
  user: String!
  exam: String!
  martialArt: MartialArtsDto!
  examiner: UserDto!
  rank: String!
  date: DateTime!
  reportUri: String!
  passed: Boolean!
}

input ExamResultInput {
  """The id of the user this exam result is all about."""
  user: String

  """The id of the related exam"""
  exam: String

  """The martial art that was testet"""
  martialArt: MartialArtInput

  """The examiner of the exam"""
  examiner: ExaminerInput

  """The name of the rank that the user achieved"""
  rank: String

  """The date string this exam took place"""
  date: String

  """Did the user passed the exam? False, if he failed."""
  passed: Boolean
}

type MaRanksDto {
  _id: MartialArtsDto!
  rankId: String!
}

input MaRanksInput {
  """The id of the martial art"""
  _id: String!

  """The id of the rank"""
  rankId: String
}

input MartialArtInput {
  """
  The id of the martial art that the exam was about. Just in case we need more information.
  """
  _id: String

  """The name of the martial art"""
  name: String

  """The style name of the martial art"""
  styleName: String
}

type MartialArtsDto {
  _id: ID!
  name: String!
  styleName: String!
  description: String
  ranks: [RankDto!]
  examiners: [SimpleUserDto!]
}

input MartialArtsInput {
  """The name of the martial art"""
  name: String

  """The style name the martial art belongs to"""
  styleName: String

  """The description of the martial art"""
  description: String

  """
  An array of all ranks available in this martial art. The lower the rank number the higher the rank.
  """
  ranks: [RankInput!]

  """
  An array of users who is examiner for this martial art. Insert user id.
  """
  examiners: [String!]
}

type Mutation {
  """Add a new club to the clubs array of a user"""
  addUserToClub(clubId: String!): UserDto!

  """Removes the current user from a club member list"""
  removeUserFromClub(clubId: String!): Boolean!

  """Add a new martial art rank to the current user"""
  addMartialArtRankToUser(maRank: MaRanksInput!, userId: String!): UserDto!

  """Updates the current user"""
  updateUser(input: UserInput!): UserDto!

  """Deletes the account of the current user"""
  deleteUser: Boolean!

  """
  Examiners can upload an exam protocol to an existing exam result. Use cURL request to send required data.
  """
  uploadAvatar(protocol: Upload!): Boolean!

  """Creates a new martial art"""
  createMartialArt(input: MartialArtsInput!): MartialArtsDto!

  """Updates an existing martial art"""
  updateMartialArt(input: MartialArtsInput!, id: String!): MartialArtsDto!

  """Adds an user as examiner"""
  addExaminer(maId: String!, email: String!): MartialArtsDto!

  """Removes an user from the examiners list"""
  removeExaminer(maId: String!, userId: String!): MartialArtsDto!

  """Deletes a martial art, if the current user is authorized"""
  deleteMartialArt(id: String!): String!

  """
  Creates a new temporary user and sends an confirmation link to the given email
  address. Returns -1 if account already exists, 1 if you already tried to
  register and 0 if registration was ok.
  """
  signup(userInput: UserInput!): Boolean!

  """
  Send a link for password reset, if the email address is in use. No error message whatsoever.
  """
  forgotPassword(email: String!): Boolean!

  """Changes the password of the current user."""
  changePassword(password: String!): Boolean!

  """Create a new club."""
  createClub(input: ClubInput!): ClubDto!

  """Adds a new admin to a club, if the current user is authorized"""
  addClubAdmin(userId: String!, clubId: String!): Boolean!

  """Update an existinc club. Just fill out what you want to change!"""
  updateClub(input: ClubInput!, id: String!): ClubDto!

  """Deletes a club, if the current user is authorized"""
  deleteClub(clubId: String!): Boolean!

  """Creates a new exam. DOH!"""
  createExam(input: ExamInput!): ExamDto!

  """You can update any exam, that was created by you!"""
  updateExam(input: ExamInput!, examId: String!): ExamDto!

  """The current user can register for an exam as participant"""
  registerToExam(examId: String!): Boolean!

  """Removes the current user as participant from the given exam"""
  unregisterFromExam(examId: String!): Boolean!

  """
  Deletes the exam with given examId, if exam.examiner equals current user
  """
  deleteExam(examId: String!): Boolean!

  """Creates a new exam result"""
  createExamResult(input: ExamResultInput!): ExamResultDto!

  """Delete all exam results related to the current user"""
  deleteRelatedExamResults: Boolean!

  """
  Examiners can upload an exam protocol to an existing exam result. Use cURL request to send required data.
  """
  uploadExamProtocol(protocol: Upload!, examResultId: String!): String!

  """Create a new Umbrella Association"""
  createUA(input: UmbrellaAssocInput!): UmbrellaAssocDto!

  """Updates an existing Umbrella Association"""
  updateUA(input: UmbrellaAssocInput!, id: String!): UmbrellaAssocDto!

  """Deletes an existing Umbrella Association"""
  deleteUA(uaId: String!): Boolean!

  """Add a new admin to a umbrella association"""
  addUaAdmin(userId: String!, uaId: String!): Boolean!

  """Send an join request to an given umbrella association"""
  uaUserJoinRequest(uaId: String!): Boolean!

  """Add a new admin to a umbrella association"""
  uaClubJoinRequest(uaId: String!, clubId: String!): Boolean!

  """Umbrella Association Admins can accept or decline an join request"""
  uaSolveJoinRequest(accepted: Boolean!, requestId: String!, uaId: String!): Boolean!
}

type Query {
  """
  Returns an user object representing the current logged in user including avatar file
  """
  getUser: UserDto!

  """Returns an array of martial art objects"""
  getAllMartialArts: [MartialArtsDto!]!

  """Returns one martial art object by id"""
  getMartialArtById(id: String!): MartialArtsDto!

  """Returns one martial art object by rank id"""
  getMartialArtByRank(rankId: String!): MartialArtsDto!

  """Returns striped out one rank object by rank id"""
  getRank(rankId: String!): RankDto!

  """Logs the user in if email and password are correct"""
  login(password: String!, email: String!): AuthModel!

  """Returns an array with all existing clubs"""
  getAllClubs: [ClubDto!]!

  """Returns one club by id"""
  getClubById(id: String!): ClubDto!

  """
  Returns an array of all club members, if the current user is authorized
  """
  getAllClubMembers(clubId: String!): [UserDto!]!

  """Returns an array of all exams. Including previous ones."""
  getAllExams: [ExamDto!]!

  """Returns one exam with the given id"""
  getExamById(id: String!): ExamDto!

  """
  Returns an array of all exams. Only exams with an future starting date included.
  """
  getPlannedExams: [ExamDto!]!

  """
  Returns all exams where the user is examiner and exam results are missing
  """
  getOpenExams: [ExamDto!]!

  """Returns an array with all exam results of the current user"""
  getAllExamResults: [ExamResultDto!]!

  """Returns one exam result with a given id"""
  getExamResultById(id: String!): ExamResultDto!

  """Get an Umbrella Association by id"""
  getUAById(id: String!): UmbrellaAssocDto!

  """Get an array with all Umbrella Associations"""
  getAllUAs: [UmbrellaAssocDto!]!
}

type RankDto {
  _id: ID!
  name: String!
  number: Float!
}

input RankInput {
  _id: String

  """The name of the martial art rank"""
  name: String!

  """
  The number of the martial art rank. We are assuming, that number 1 is your grand master (highest rank)!
  """
  number: Float!
}

type SimpleUserDto {
  _id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!

  """
  Returns an array of Martial Arts. The child array "ranks" should only contain the current rank (at index 0).
  """
  martialArts: [MaRanksDto!]!
  clubs: [ClubMemberDto!]!
  avatarUri: String!
}

type UmbrellaAssocDto {
  _id: ID!

  """The name of the club"""
  name: String!
  street: String!
  zip: String!
  city: String!

  """Register of associatoins ID, if exists in country of origin"""
  registrationId: String!

  """Country of origin"""
  country: String!

  """An array(ids) of provided martial arts in this club"""
  martialArts: [MartialArtsDto!]!

  """
  An array(ids) of users who administrate this club. Default: The creator of the club.
  """
  admins: [UserDto!]!

  """An array of clubs that are members of this association"""
  clubs: [String!]

  """An array of users that are members on their own"""
  singleMembers: [String!]
}

input UmbrellaAssocInput {
  """The name of the umbrella association"""
  name: String

  """You need a description for this?"""
  street: String

  """You need a description for this?"""
  zip: String

  """You need a description for this?"""
  city: String

  """Register of associatoins ID, if exists in country of origin"""
  registrationId: String

  """Country of origin"""
  country: String

  """An array(ids) of provided martial arts in this club"""
  martialArts: [String!]

  """
  An array(ids) of users who administrate this club. Default: The creator of the club.
  """
  admins: [String!]

  """An array of clubs that are members of this association"""
  clubs: [String!]

  """An array of users that are members on their own"""
  singleMembers: [String!]
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserDto {
  _id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!

  """
  Returns an array of Martial Arts. The child array "ranks" should only contain the current rank (at index 0).
  """
  martialArts: [MaRanksDto!]
  clubs: [ClubMemberDto!]
  avatarUri: String
}

input UserInput {
  """The users first name"""
  firstName: String

  """The users last name"""
  lastName: String

  """The users email address"""
  email: String

  """
  The users password. Will be turned into a hash before we write it into the database.
  """
  password: String

  """
  An array of martial art rank ids. We look out that you dont insert two ranks of the same martial art.
  """
  martialArts: [String!]

  """An array of clubs the user is (or wants to be) an member of."""
  clubs: [ClubMemberInput!]
}
